---

# - name: template
#   become: false
#   ansible.builtin.template:
#     src: rook-cluster.yaml.j2
#     dest: /home/bmilco/rook.cluster.yaml
#   connection: local

- name: install lvm2 and other fs tools
  apt:
    name:
      - lvm2
      - xfsprogs
      - hdparm
    state: present

- name: Ceph admin functions
  when:
    - inventory_hostname in k8s_controller
  block:
    - name: Label node as storage node
      ansible.builtin.command:
        cmd: "kubectl label node {{ item.name }} {{ lan_domain }}/node-role=storage-node"
      loop: "{{ ceph_storage }}"

    - name: Add rook helm repo
      kubernetes.core.helm_repository:
        name: rook-release
        url: https://charts.rook.io/release
        state: present

    - name: Deploy Rook Operator Helm chart
      kubernetes.core.helm:
        name: rook-ceph
        kubeconfig: /etc/kubernetes/admin.conf
        chart_ref: rook-release/rook-ceph
        chart_version: "{{ rook_version }}"
        namespace: "{{ rook_namespace }}"
        create_namespace: true
        values: "{{ lookup('template', 'rook-ceph.yaml.j2') | from_yaml }}"
        state: present

    - name: Deploy Rook Cluster Helm chart
      kubernetes.core.helm:
        name: rook-ceph-cluster
        kubeconfig: /etc/kubernetes/admin.conf
        chart_ref: rook-release/rook-ceph-cluster
        chart_version: "{{ rook_version }}"
        namespace: "{{ rook_namespace }}"
        values: "{{ lookup('template', 'rook-cluster.yaml.j2') | from_yaml }}"
        state: present

    # - name: Deploy LoadBalancer for public s3 endpoint
    #   kubernetes.core.k8s:
    #     state: present
    #     template: 's3.yaml.j2'

    - name: Copy reset script to controller
      ansible.builtin.template:
        src: ceph-reset.sh.j2
        dest: /root/ceph-reset.sh
        owner: root
        group: root
        mode: 0700

    - name: Create ingress
      ansible.builtin.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: ceph-ingress
            namespace: "{{ rook_namespace }}"
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt
          spec:
            ingressClassName: cilium
            tls:
              - hosts:
                  - 'ceph.{{ lan_tld }}'
                secretName: wildcard.{{ lan_domain }}
            rules:
              - host: ceph.{{ lan_tld }}
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: rook-ceph-mgr-dashboard
                          port:
                            number: 8443
...

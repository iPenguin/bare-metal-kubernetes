---
- name: Get Keycloak passwords
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: keycloak-passwords
    namespace: keycloak
  register: keycloak_secrets

- name: Get Keycloak admin password
  ansible.builtin.set_fact:
    keycloak_admin_password: "{{ keycloak_secrets.resources[0].data['adminPassword'] | b64decode }}"
    svc_ldap_password: "{{ keycloak_secrets.resources[0].data['BIND_PASSWORD'] | b64decode }}"

- name: Create a new realm in Keycloak
  community.general.keycloak_realm:
    auth_keycloak_url: "{{ keycloak.url }}"
    auth_username: "{{ keycloak.admin_username }}"
    auth_password: "{{ keycloak_admin_password }}"
    auth_realm: "{{ keycloak.admin_realm }}"
    realm: "{{ keycloak.realm }}"
    state: present
    enabled: true
  register: realm_result

- name: Create LDAP user federation for FreeIPA in Keycloak
  delegate_to: localhost
  community.general.keycloak_user_federation:
    auth_keycloak_url: "{{ keycloak.url }}"
    auth_username: "{{ keycloak.admin_username }}"
    auth_password: "{{ keycloak_admin_password }}"
    auth_realm: "{{ keycloak.admin_realm }}"
    realm: "{{ keycloak.realm }}"
    state: present
    name: "freeipa-ldap"
    provider_id: "ldap"
    config:
      connectionUrl: "ldap://ipa-01.{{ lan_domain }}:389"
      usersDn: "cn=users,cn=accounts,{{ ldap_base_dn }}"
      bindDn: "uid=svc_ldap,cn=users,cn=accounts,{{ ldap_base_dn }}"
      bindCredential: "{{ svc_ldap_password }}"
      vendor: "other"
      authType: "simple"
      usernameLDAPAttribute: "uid"
      rdnLDAPAttribute: "uid"
      uuidLDAPAttribute: "nsUniqueId"
      userObjectClasses: "inetOrgPerson, organizationalPerson, person, top"
      searchScope: 2
      editMode: "READ_ONLY"
      fullSyncPeriod: 86400  # 24hr sync
      changedSyncPeriod: 3600  # 1hr sync
      syncRegistrations: false
      trustEmail: true
      pagination: true
    mappers:
      - name: "creation date"
        providerId: "user-attribute-ldap-mapper"
        config:
          user.model.attribute: "createTimestamp"
          ldap.attribute: "createTimestamp"
          read.only: "true"
          alwaysReadValueFromLDAP: "true"
          isMandatory: "false"
          is.binary.attribute: "false"
      - name: "email"
        providerId: "user-attribute-ldap-mapper"
        config:
          user.model.attribute: "email"
          ldap.attribute: "mail"
          read.only: "true"
          alwaysReadValueFromLDAP: "false"
          isMandatory: "false"
          is.binary.attribute: "false"
      - name: "first name"
        providerId: "user-attribute-ldap-mapper"
        config:
          user.model.attribute: "firstName"
          ldap.attribute: "cn"
          read.only: "true"
          alwaysReadValueFromLDAP: "true"
          isMandatory: "true"
          is.binary.attribute: "false"
      - name: "Kerberos principal attribute mapper"
        providerId: "kerberos-principal-attribute-mapper"
      - name: "last name"
        providerId: "user-attribute-ldap-mapper"
        config:
          user.model.attribute: "lastName"
          ldap.attribute: "sn"
          read.only: "true"
          alwaysReadValueFromLDAP: "true"
          isMandatory: "true"
          is.binary.attribute: "false"
      - name: "modify date"
        providerId: "user-attribute-ldap-mapper"
        config:
          user.model.attribute: "modifyTimestamp"
          ldap.attribute: "modifyTimestamp"
          read.only: "true"
          alwaysReadValueFromLDAP: "true"
          isMandatory: "false"
          is.binary.attribute: "false"
      - name: "username"
        providerId: "user-attribute-ldap-mapper"
        config:
          user.model.attribute: "username"
          ldap.attribute: "uid"
          read.only: "true"
          alwaysReadValueFromLDAP: "false"
          isMandatory: "true"
          is.binary.attribute: "false"
      - name: "groups"
        providerId: "group-ldap-mapper"
        config:
          groups.dn: "cn=groups,cn=accounts,{{ ldap_base_dn }}"
          group.name.ldap.attribute: "cn"
          group.object.classes: "groupOfNames"
          membership.ldap.attribute: "memberOf"
          membership.attribute.type: "DN"
          groups.path: "/"
          mode: "LDAP_ONLY"
          user.roles.retrieve.strategy: "GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE"
          drop.non.existing.groups.during.sync: "false"
          preserve.group.inheritance: "true"
          alwaysReadValueFromLDAP: "true"

- name: Create openid client scope
  community.general.keycloak_clientscope:
    auth_keycloak_url: "{{ keycloak.url }}"
    auth_username: "{{ keycloak.admin_username }}"
    auth_password: "{{ keycloak_admin_password }}"
    auth_realm: "{{ keycloak.admin_realm }}"
    realm: "{{ keycloak.realm }}"
    state: present
    name: "openid"
    description: "Client scope for OpenID Connect standard claims"
    protocol: "openid-connect"
    attributes:
      include.in.token.scope: "true"
      display.on.consent.screen: "true"
      consent.screen.text: "Access to OpenID Connect claims"
      include.in.assigned.scope: "default"
    protocol_mappers:
      - name: "openid"
        protocol: "openid-connect"
        protocolMapper: "oidc-usermodel-property-mapper"
        config:
          user.model.attribute: "user.id"
          claim.name: "openid"
          jsonType.label: "String"
          id.token.claim: true
          access.token.claim: true
          userinfo.token.claim: true

- name: Create username client scope
  community.general.keycloak_clientscope:
    auth_keycloak_url: "{{ keycloak.url }}"
    auth_username: "{{ keycloak.admin_username }}"
    auth_password: "{{ keycloak_admin_password }}"
    auth_realm: "{{ keycloak.admin_realm }}"
    realm: "{{ keycloak.realm }}"
    state: present
    name: "username"
    description: "Client scope for including username in tokens"
    protocol: "openid-connect"
    attributes:
      include.in.token.scope: "true"
      display.on.consent.screen: "true"
      consent.screen.text: "Access to username"
      include.in.assigned.scope: "default"
    protocol_mappers:
      - name: "username"
        protocol: "openid-connect"
        protocolMapper: "oidc-usermodel-property-mapper"
        config:
          user.model.attribute: "username"
          claim.name: "username"
          jsonType.label: "String"
          id.token.claim: true
          access.token.claim: true
          userinfo.token.claim: true

- name: Create groups client scope
  community.general.keycloak_clientscope:
    auth_keycloak_url: "{{ keycloak.url }}"
    auth_username: "{{ keycloak.admin_username }}"
    auth_password: "{{ keycloak_admin_password }}"
    auth_realm: "{{ keycloak.admin_realm }}"
    realm: "{{ keycloak.realm }}"
    state: present
    name: "groups"
    description: "Client scope for including group memberships in tokens"
    protocol: "openid-connect"
    attributes:
      include.in.token.scope: "true"
      display.on.consent.screen: "true"
      consent.screen.text: "Access to group memberships"
      include.in.assigned.scope: "default"
    protocol_mappers:
      - name: "groups"
        protocol: "openid-connect"
        protocolMapper: "oidc-group-membership-mapper"
        config:
          claim.name: "groups"
          full.path: "false"
          id.token.claim: true
          access.token.claim: true
          userinfo.token.claim: true

- name: Configure Keycloak client for ArgoCD
  delegate_to: localhost
  community.general.keycloak_client:
    auth_keycloak_url: "{{ keycloak.url }}"
    auth_username: "{{ keycloak.admin_username }}"
    auth_password: "{{ keycloak_admin_password }}"
    auth_realm: "{{ keycloak.admin_realm }}"
    realm: "{{ keycloak.realm }}"
    state: present
    client_id: "argocd"
    name: "ArgoCD"
    enabled: true
    client_authenticator_type: "client-secret"
    secret: "{{ argocd_client_secret }}"
    public_client: false
    protocol: "openid-connect"
    standard_flow_enabled: true
    implicit_flow_enabled: false
    direct_access_grants_enabled: true
    service_accounts_enabled: false
    base_url: "https://argocd.{{ lan_domain }}"
    redirect_uris:
      - "https://argocd.{{ lan_domain }}/auth/callback"
    web_origins:
      - "https://argocd.{{ lan_domain }}"
    consent_required: false
    default_client_scopes:
      - "email"
      - "groups"
      - "openid"
      - "profile"
      - "username"

- name: Configure Keycloak client for gitea
  delegate_to: localhost
  community.general.keycloak_client:
    auth_keycloak_url: "{{ keycloak.url }}"
    auth_username: "{{ keycloak.admin_username }}"
    auth_password: "{{ keycloak_admin_password }}"
    auth_realm: "{{ keycloak.admin_realm }}"
    realm: "{{ keycloak.realm }}"
    state: present
    client_id: "gitea"
    name: "Gitea configuration"
    enabled: true
    client_authenticator_type: "client-secret"
    secret: "{{ gitea_client_secret }}"
    public_client: false
    protocol: "openid-connect"
    standard_flow_enabled: true
    implicit_flow_enabled: false
    direct_access_grants_enabled: true
    service_accounts_enabled: false
    base_url: "https://git.{{ lan_domain }}"
    redirect_uris:
      - "https://git.{{ lan_domain }}/user/oauth2/homelab/callback"
    web_origins:
      - "https://git.{{ lan_domain }}"
    consent_required: false
    default_client_scopes:
      - "email"
      - "groups"
      - "openid"
      - "profile"
      - "username"

- name: Configure Keycloak client for harbor
  delegate_to: localhost
  community.general.keycloak_client:
    auth_keycloak_url: "{{ keycloak.url }}"
    auth_username: "{{ keycloak.admin_username }}"
    auth_password: "{{ keycloak_admin_password }}"
    auth_realm: "{{ keycloak.admin_realm }}"
    realm: "{{ keycloak.realm }}"
    state: present
    client_id: "harbor"
    name: "Harbor configuration"
    enabled: true
    client_authenticator_type: "client-secret"
    secret: "{{ harbor_client_secret }}"
    public_client: false
    protocol: "openid-connect"
    standard_flow_enabled: true
    implicit_flow_enabled: false
    direct_access_grants_enabled: true
    service_accounts_enabled: false
    base_url: "https://harbor.{{ lan_domain }}"
    redirect_uris:
      - "https://harbor.{{ lan_domain }}/c/oidc/callback"
    web_origins:
      - "https://harbor.{{ lan_domain }}"
    consent_required: false
    default_client_scopes:
      - "email"
      - "groups"
      - "openid"
      - "profile"
      - "username"
---
- name: Remove existing k8s gpg key
  ansible.builtin.file:
    path: /etc/apt/trusted.gpg.d/kubernetes-apt-keyring.asc
    state: absent

- name: Download k8s gpg keys
  ansible.builtin.uri:
    url: https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version[:-2] }}/deb/Release.key
    dest: /etc/apt/trusted.gpg.d/kubernetes-apt-keyring.asc
    status_code:
      - 200
      - 304

- name: Remove existing k8s repo
  ansible.builtin.file:
    path: /etc/apt/sources.list.d/kubernetes.list
    state: absent

- name: Configure k8s repo
  ansible.builtin.blockinfile:
    path: /etc/apt/sources.list.d/kubernetes.list
    block: |
      deb [signed-by=/etc/apt/trusted.gpg.d/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version[:-2] }}/deb/ /
    create: yes
    state: present

- name: Kubeadm upgrade
  when:
    - inventory_hostname in groups['controllers']
  block:
    - name: Create controller info list
      set_fact:
        controller_info: "{{ controller_info | default([]) + [h] }}"
      loop: "{{ groups['controllers'] }}"
      vars:
        raw_ipv6: "{{ lookup('dig', item, 'qtype=AAAA', wantlist=True) }}"
        filtered_ipv6: "{{ raw_ipv6 | reject('match', '^(fe80::|fd)') | list }}"
        h:
          hostname: "{{ item }}"
          ipv4: "{{ lookup('dig', item, 'qtype=A') }}"
          ipv6: "{{ filtered_ipv6[0] }}"

    - name: Update apt packages
      ansible.builtin.apt:
        name:
          - kubeadm={{ kubernetes_version }}-1.1
        allow_change_held_packages: yes
        state: present
        update_cache: yes

    - name: Upload kubeadm upgrade configuration
      ansible.builtin.template:
        src: ../templates/kubeadm-upgrade.yaml.j2
        dest: /root/kubeadm-upgrade.yaml
        owner: root
        group: root
        mode: 0640

    - name: Upgrade kubernetes
      ansible.builtin.command:
        cmd: kubeadm upgrade apply --config /root/kubeadm-upgrade.yaml -y v{{ kubernetes_version }}
      changed_when: false

- name: Upgrade kubelet
  block:
    - name: Install kubectl kubeadm and kubelet
      ansible.builtin.apt:
        name:
          - kubeadm={{ kubernetes_version }}-1.1
          - kubectl={{ kubernetes_version }}-1.1
          - kubelet={{ kubernetes_version }}-1.1
        allow_change_held_packages: yes
        state: present
        update_cache: yes

    - name: Mark k8s packages as hold
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubeadm
        - kubectl
        - kubelet

    - name: Upgrade all nodes
      ansible.builtin.command:
        cmd: kubeadm upgrade node

    - name: Get list of certs
      connection: local
      become: false
      ansible.builtin.shell: |
        kubectl get csr -o json |
        jq -r '.items[] | select(.spec.username=="system:node:w4.clt.milco.casa") |
        select(.status.conditions[0].type==null) | .metadata.name' | \
        sort -r | head -n 1
      changed_when: false
      register: node_cert

    - name: NOT FOR PRODUCTION USE - Blindly approve node certs without checking them
      connection: local
      become: false
      ansible.builtin.command:
        cmd: kubectl certificate approve {{ node_cert.stdout }}
      when: node_cert.stdout != ""
      notify: Restart kubelet

- name: Get cluster status
  connection: local
  become: false
  ansible.builtin.command:
    cmd: kubectl get nodes
  changed_when: false
  register: cluster_status

- name: Show cluster status
  ansible.builtin.debug:
    msg: "{{ cluster_status.stdout }}"
